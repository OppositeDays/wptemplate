@charset "UTF-8";
/*!
Theme Name: WPTemple
Theme URI: https://www.wptemple.com
Description: Theme for WPTemple.com
Author: Zach Russell
Author URI: http://protechig.com
Template: genesis
Template Version: 2.1.2
License: GPL-2.0+
License URI: http://www.gnu.org/licenses/gpl-2.0.html
*/
/* Import Bourbon & Neat */
/* Neat 1.7.0.pre
 * http://neat.bourbon.io
 * Copyright 2012â€“2014 thoughtbot, inc.
 * MIT License */
/**
 * Disable all deprecation warnings. Defaults to `false`. Set with a `!global` flag.
 *
 * @type Bool
 */
html {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*, *:before, *:after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit; }

/**
 * Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.
 *
 * Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.
 *
 * @param {Number} $local-max-width ($max-width) - Max width to be applied to the element. Can be a percentage or a measure.
 *
 * @example scss
 *  .element {
 *    @include outer-container(100%);
 *  }
 *
 * @example css
 *  .element {
 *    *zoom: 1;
 *    max-width: 100%;
 *    margin-left: auto;
 *    margin-right: auto;
 *  }
 *
 *  .element:before, .element:after {
 *    content: " ";
 *    display: table;
 *  }
 *
 *  .element:after {
 *    clear: both;
 *  }
 */
/**
 * Changes the display property used by other mixins called in the code block argument.
 *
 * @param {String} $display (block) - Display value to be used within the block. Can be `table` or `block`.
 *
 * @example scss
 *   @include display(table) {
 *    .display-table {
 *      @include span-columns(6);
 *     }
 *   }
 *
 * @example css
 *   // CSS
 *   .display-table {
 *      display: table-cell;
 *      ...
 *   }
 */
/**
 * Changes the direction property used by other mixins called in the code block argument.
 *
 * @param {String} $direction (left-to-right) - Layout direction to be used within the block. Can be `left-to-right` or `right-to-left`.
 *
 * @example scss
 *   @include direction(right-to-left) {
 *    .right-to-left-block {
 *      @include span-columns(6);
 *     }
 *   }
 *
 * @example css
 *   // CSS
 *   .right-to-left-block {
 *     float: right;
 *      ...
 *   }
 */
/* Import Local Variables and Mixins */
/* Import Local Styles */
